import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ContentType
from aiogram.filters import CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
PDF_URL = os.getenv("PDF_URL")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–≤‚Äô—è–∑–∫—É user_message_id ‚Üî group_message_id
message_links = {}


@dp.message(CommandStart())
async def start_handler(message: Message):
    welcome_text = (
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –ø—Ä–æ—î–∫—Ç—ñ <b>¬´–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É –≤ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É TOTIS¬ª</b>!\n\n"
        "üßæ –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n"
        f"{PDF_URL}\n\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ ‚Äî "
        "–≤–æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ—Ç—Ä–∞–ø–∏—Ç—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤."
    )
    await message.answer(welcome_text, parse_mode="HTML")


# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@dp.message(F.content_type.in_({ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.VOICE}))
async def forward_to_group(message: Message):
    user = message.from_user
    user_info = f"üë§ –í—ñ–¥: {user.full_name or '–ù–µ–≤—ñ–¥–æ–º–æ'} (ID: {user.id})"

    if message.text:
        caption = f"‚úâÔ∏è –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n{user_info}\n\n{message.text}"
        sent = await bot.send_message(GROUP_CHAT_ID, caption)
    elif message.photo:
        caption = f"üñº –§–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n{user_info}"
        sent = await bot.send_photo(GROUP_CHAT_ID, photo=message.photo[-1].file_id, caption=caption)
    elif message.video:
        caption = f"üé• –í—ñ–¥–µ–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n{user_info}"
        sent = await bot.send_video(GROUP_CHAT_ID, video=message.video.file_id, caption=caption)
    elif message.voice:
        caption = f"üéô –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n{user_info}"
        sent = await bot.send_voice(GROUP_CHAT_ID, voice=message.voice.file_id, caption=caption)
    else:
        return

    # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –∑–≤‚Äô—è–∑–æ–∫
    message_links[sent.message_id] = user.id


# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –≥—Ä—É–ø–∏
import re

@dp.message(F.chat.id == GROUP_CHAT_ID, F.reply_to_message)
async def reply_from_group(message: Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞–Ω–∞ —Å–∞–º–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    if not message.reply_to_message.from_user or message.reply_to_message.from_user.id != (await bot.me()).id:
        return  # —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ä–µ–ø–ª–∞—ó –Ω–µ –¥–æ –±–æ—Ç–∞

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∞–±–æ –ø—ñ–¥–ø–∏—Å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    replied_text = message.reply_to_message.caption or message.reply_to_message.text or ""

    # –í–∏—Ç—è–≥—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ regex
    match = re.search(r"ID:\s*(\d+)", replied_text)
    if not match:
        await bot.send_message(GROUP_CHAT_ID, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
        return

    user_id = int(match.group(1))
    reply_text = message.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç—É)"

    try:
        await bot.send_message(user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏:\n\n{reply_text}")
        await bot.send_message(GROUP_CHAT_ID, f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    except Exception as e:
        await bot.send_message(GROUP_CHAT_ID, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}\n{e}")




async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
