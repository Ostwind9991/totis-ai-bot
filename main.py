import asyncio
import logging
import os
import re
import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ContentType
from aiogram.filters import CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
PDF_URL = os.getenv("PDF_URL")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

DB_PATH = "links.db"


# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS message_links (
                group_message_id INTEGER PRIMARY KEY,
                user_id INTEGER
            )
        """)
        await db.commit()


async def save_link(group_message_id: int, user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR REPLACE INTO message_links VALUES (?, ?)", (group_message_id, user_id))
        await db.commit()


async def get_user_by_group_message(group_message_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id FROM message_links WHERE group_message_id = ?", (group_message_id,)) as cur:
            row = await cur.fetchone()
            return row[0] if row else None


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def start_handler(message: Message):
    welcome_text = (
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –ø—Ä–æ—î–∫—Ç—ñ <b>¬´–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É –≤ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É TOTIS¬ª</b>!\n\n"
        "üßæ –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n"
        f"{PDF_URL}\n\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ ‚Äî "
        "–≤–æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ—Ç—Ä–∞–ø–∏—Ç—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤."
    )
    await message.answer(welcome_text, parse_mode="HTML")


# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ===
@dp.message(F.content_type.in_({ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.VOICE}))
async def forward_to_group(message: Message):
    user = message.from_user
    user_id = user.id
    full_name = user.full_name or "–ù–µ–≤—ñ–¥–æ–º–æ"

    # –Ø–∫—â–æ —î username, —Ä–æ–±–∏–º–æ –π–æ–≥–æ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–º
    if user.username:
        username_part = f"(<a href='https://t.me/{user.username}'>@{user.username}</a>)"
    else:
        username_part = ""

    user_info = f"üë§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ <b>{full_name}</b> {username_part} (ID: <code>{user_id}</code>):"

    sent = None

    if message.text:
        caption = f"{user_info}\n\n{message.text}"
        sent = await bot.send_message(GROUP_CHAT_ID, caption, parse_mode="HTML", disable_web_page_preview=True)
    elif message.photo:
        caption = f"{user_info}\n\nüñº –§–æ—Ç–æ"
        sent = await bot.send_photo(GROUP_CHAT_ID, photo=message.photo[-1].file_id, caption=caption, parse_mode="HTML")
    elif message.video:
        caption = f"{user_info}\n\nüé• –í—ñ–¥–µ–æ"
        sent = await bot.send_video(GROUP_CHAT_ID, video=message.video.file_id, caption=caption, parse_mode="HTML")
    elif message.voice:
        caption = f"{user_info}\n\nüéô –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        sent = await bot.send_voice(GROUP_CHAT_ID, voice=message.voice.file_id, caption=caption, parse_mode="HTML")

    if sent:
        await save_link(sent.message_id, user_id)
        logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑–≤‚Äô—è–∑–æ–∫ group_msg={sent.message_id} ‚Üí user_id={user_id}")


# === –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑ –≥—Ä—É–ø–∏ ===
@dp.message(F.chat.id == GROUP_CHAT_ID)
async def handle_group_messages(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –ª–∏—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ.
    –Ø–∫—â–æ —Ü–µ reply –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
    """
    if not message.reply_to_message or not message.reply_to_message.from_user:
        return

    # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ —Ü–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    if message.reply_to_message.from_user.id != (await bot.me()).id:
        return

    replied_message_id = message.reply_to_message.message_id
    user_id = await get_user_by_group_message(replied_message_id)

    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ, –ø—Ä–æ–±—É—î–º–æ regex
    if not user_id:
        replied_text = message.reply_to_message.caption or message.reply_to_message.text or ""
        match = re.search(r"ID:\s*(\d+)", replied_text)
        if match:
            user_id = int(match.group(1))

    if not user_id:
        await bot.send_message(GROUP_CHAT_ID, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    reply_text = message.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç—É)"
    try:
        await bot.send_message(user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏:\n\n{reply_text}")
        await bot.send_message(GROUP_CHAT_ID, f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    except Exception as e:
        await bot.send_message(GROUP_CHAT_ID, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}\n{e}")


# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
